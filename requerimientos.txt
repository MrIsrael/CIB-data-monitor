TÍTULO: "CIB en pesos / en tiempo real"

Cálculo = ( CIB * (USD/COP) ) / 4

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

HECHO / FRONTEND:
- Subir la app a Netlify y ver si funciona desde allí --> EL FRONTEND SI, EL BACKEND (scraper) NO...
- Mostrar la URL desde la cual se obtuvieron los últimos datos usados en el cálculo (web scrapping o API pública) --> http://localhost:3500/api/data/
- Definir con qué intervalos se harían los scrappings: Cuando las dos funciones Node devuelvan un valor, conjuntamente? --> SI!
- Se debe mostrar el tiempo en segundos transcurrido desde la última vez que se hizo el cálculo y se actualizó el valor en pantalla.
- El resultado del cálculo debe mostrarse rojo si es menor que el inmediatamente anterior, y verde si es mayor.
- No es necesario mostrar qué tanto varió con respecto al valor inmediatamente anterior, hacia arriba o hacia debajo. Sólo si varió o no.
- Agregar un aviso cada vez que se obtenga un dato nuevo desde la API.
- Poner un botón que muestre / oculte la información extra, como los últimos valores obtenidos de la API, y el aviso de dato nuevo recibido.
- El contador de tiempo debe incluir la funcionalidad de contar minutos y horas, si no hay cambios después de 60 segundos / 60 minutos,
  aunque éste si debería temporizar con un setInterval. Las funciones del scraper son asíncronas.
- Probar el entorno de ejecución en Windows, y crear un script para poner en el escritorio, que ejecute el backend en la terminal (el index.js de Node)
  y abra el frontend en Chrome (index.html + app.js con live-server).
    
HECHO / BACKEND:
- Hay que tener la página de TradingView (o la de la fuente de datos) abierta para poder obtenerlos y hacer el cálculo con ellos? --> NO!
- Convertir la app a ejecutable para Windows y Mac, con Electron --> NO ES NECESARIO, CONSUMIRÍA RECURSOS DEL CLIENTE INNECESARIAMENTE!
  Se necesita un procesador con más de 4 núcleos, más de 8GB de RAM y conexión a internet de más de 50 Mbps para tener el resultado de la API en menos de
  10 segundos. Mejor que la app corra en Netlify, y no en el cliente (desde la terminal, o con Electron).
- Agregar luego input donde se pueda poner URL custom como fuente de los datos, si la URL por defecto no funciona o bannea la IP temporalmente --> NO ES NECESARIO!
- Incluir un endpoint que retorne un texto, indicando la ruta de entrada correcta a la API de datos.
- Se intentó correr el backend en Netlify, usando Netlify lambda functions, pero no funcionó. La versión gratuita de Netlify functions sólo permite que las funciones
  corran por un tiempo máximo de 10 segundos, y las llamadas de los scrapers tardaban más que eso. Además, permite 125K llamadas a endpoints por mes (ok), pero solo
  correr las funciones lambda por 100 horas al mes. Eso daría para unos 10 días aprox.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

"Símbolos" a scrappear en la página de TradingView (opción "ticker"):
- CIB
- USDCOP

Fuentes de datos: 
https://es.tradingview.com/symbols/USDCOP/
https://es.tradingview.com/symbols/NYSE-CIB/
